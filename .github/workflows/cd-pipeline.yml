name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false

env:
  REGISTRY: registry.medcontracthub.com
  NAMESPACE: medcontracthub

jobs:
  # Pre-deployment checks
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy_version: ${{ steps.version.outputs.version }}
      can_deploy: ${{ steps.checks.outputs.can_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Check deployment window
        id: checks
        run: |
          # Check if we're in a deployment window (not Friday after 2 PM or weekends)
          HOUR=$(date +%H)
          DAY=$(date +%u)
          
          if [ $DAY -eq 5 ] && [ $HOUR -ge 14 ]; then
            echo "‚ùå No deployments on Friday after 2 PM"
            echo "can_deploy=false" >> $GITHUB_OUTPUT
          elif [ $DAY -ge 6 ]; then
            echo "‚ùå No deployments on weekends"
            echo "can_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ Deployment window OK"
            echo "can_deploy=true" >> $GITHUB_OUTPUT
          fi

      - name: Check service health
        run: |
          # Check staging health before production deploy
          curl -f https://staging.medcontracthub.com/api/health || exit 1

  # Database migrations
  database-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks]
    if: needs.pre-deploy-checks.outputs.can_deploy == 'true'
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          # Backup database first
          pg_dump $DATABASE_URL > backup-$(date +%s).sql
          
          # Run migrations
          npm run db:migrate:prod
          
          # Verify migrations
          npm run db:verify

  # Blue-Green Deployment
  blue-green-deploy:
    name: Blue-Green Deployment
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, database-migrations]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
    strategy:
      matrix:
        service:
          - medcontracthub-app
          - ai-service
          - ocr-service
          - analytics-service
          - realtime-service
          - worker-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create green deployment
        run: |
          # Get current (blue) deployment
          kubectl get deployment ${{ matrix.service }} -n medcontract-prod -o yaml > blue-deployment.yaml
          
          # Create green deployment
          sed -i 's/${{ matrix.service }}/${{ matrix.service }}-green/g' blue-deployment.yaml
          sed -i 's/version: blue/version: green/g' blue-deployment.yaml
          
          # Update image
          kubectl set image deployment/${{ matrix.service }}-green \
            ${{ matrix.service }}=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service }}:${{ needs.pre-deploy-checks.outputs.deploy_version }} \
            -n medcontract-prod --local -o yaml > green-deployment.yaml
          
          # Apply green deployment
          kubectl apply -f green-deployment.yaml

      - name: Wait for green deployment
        run: |
          kubectl rollout status deployment/${{ matrix.service }}-green -n medcontract-prod --timeout=10m

      - name: Run health checks
        run: |
          # Get green pod IPs
          GREEN_PODS=$(kubectl get pods -n medcontract-prod -l app=${{ matrix.service }},version=green -o jsonpath='{.items[*].status.podIP}')
          
          # Health check each pod
          for POD_IP in $GREEN_PODS; do
            curl -f http://$POD_IP:${{ matrix.service.port }}/health || exit 1
          done

      - name: Switch traffic to green
        run: |
          # Update service selector to point to green
          kubectl patch service ${{ matrix.service }} -n medcontract-prod \
            -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait for traffic switch
          sleep 30
          
          # Verify traffic is going to green
          RESPONSE=$(curl -s https://medcontracthub.com/api/version)
          if [[ $RESPONSE != *"${{ needs.pre-deploy-checks.outputs.deploy_version }}"* ]]; then
            echo "‚ùå Traffic not switched to new version"
            exit 1
          fi

      - name: Delete blue deployment
        if: success()
        run: |
          # Keep blue deployment for 5 minutes for quick rollback
          sleep 300
          
          # Delete old blue deployment
          kubectl delete deployment ${{ matrix.service }} -n medcontract-prod
          
          # Rename green to blue for next deployment
          kubectl patch deployment ${{ matrix.service }}-green -n medcontract-prod \
            --type='json' -p='[{"op": "replace", "path": "/metadata/name", "value": "${{ matrix.service }}"}]'

  # Canary deployment (alternative)
  canary-deploy:
    name: Canary Deployment
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, database-migrations]
    if: github.event.inputs.environment == 'production' && false  # Disabled by default
    steps:
      - name: Deploy canary
        run: |
          # Deploy 10% traffic to canary
          kubectl set image deployment/$SERVICE-canary \
            $SERVICE=${{ env.REGISTRY }}/${{ env.NAMESPACE }}/$SERVICE:${{ needs.pre-deploy-checks.outputs.deploy_version }} \
            -n medcontract-prod

      - name: Monitor canary metrics
        run: |
          # Monitor error rate for 10 minutes
          for i in {1..10}; do
            ERROR_RATE=$(kubectl exec -n monitoring deployment/prometheus -- \
              promtool query instant \
              'rate(http_requests_total{job="$SERVICE-canary",status=~"5.."}[5m]) / rate(http_requests_total{job="$SERVICE-canary"}[5m])')
            
            if (( $(echo "$ERROR_RATE > 0.01" | bc -l) )); then
              echo "‚ùå Canary error rate too high: $ERROR_RATE"
              exit 1
            fi
            
            sleep 60
          done

      - name: Promote canary
        if: success()
        run: |
          # Gradually increase traffic to canary
          for WEIGHT in 25 50 75 100; do
            kubectl patch virtualservice $SERVICE -n medcontract-prod --type='json' \
              -p='[{"op": "replace", "path": "/spec/http/0/route/0/weight", "value": '$((100-WEIGHT))'}]'
            kubectl patch virtualservice $SERVICE -n medcontract-prod --type='json' \
              -p='[{"op": "replace", "path": "/spec/http/0/route/1/weight", "value": '$WEIGHT'}]'
            
            sleep 300  # 5 minutes between increases
          done

  # Post-deployment validation
  post-deploy-validation:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [blue-green-deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run smoke tests
        run: |
          npm run test:smoke -- --env=${{ github.event.inputs.environment || 'production' }}

      - name: Run synthetic monitoring
        run: |
          # Check critical user journeys
          npm run test:synthetic -- \
            --journey=login \
            --journey=search-opportunities \
            --journey=generate-proposal \
            --journey=view-analytics

      - name: Verify SLOs
        run: |
          # Check if SLOs are being met
          AVAILABILITY=$(curl -s https://grafana.medcontracthub.com/api/datasources/proxy/1/api/v1/query \
            --data-urlencode 'query=avg_over_time(up{job="medcontracthub"}[5m])' | jq '.data.result[0].value[1]')
          
          if (( $(echo "$AVAILABILITY < 0.999" | bc -l) )); then
            echo "‚ùå Availability SLO not met: $AVAILABILITY"
            exit 1
          fi

      - name: Load test new version
        run: |
          k6 run tests/performance/smoke-test.js \
            --env BASE_URL=https://medcontracthub.com \
            --out cloud

  # Rollback procedure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [blue-green-deploy]
    if: failure()
    steps:
      - name: Rollback to blue
        run: |
          # Switch traffic back to blue
          kubectl patch service $SERVICE -n medcontract-prod \
            -p '{"spec":{"selector":{"version":"blue"}}}'
          
          # Delete failed green deployment
          kubectl delete deployment $SERVICE-green -n medcontract-prod

      - name: Rollback database
        run: |
          # Restore from backup if migrations failed
          if [ -f backup-*.sql ]; then
            psql $DATABASE_URL < backup-*.sql
          fi

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'üö® Production deployment failed and was rolled back!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [post-deploy-validation]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update deployment log
        run: |
          echo "## Deployment $(date +%Y-%m-%d)" >> DEPLOYMENTS.md
          echo "- Version: ${{ needs.pre-deploy-checks.outputs.deploy_version }}" >> DEPLOYMENTS.md
          echo "- Environment: ${{ github.event.inputs.environment || 'production' }}" >> DEPLOYMENTS.md
          echo "- Deployed by: ${{ github.actor }}" >> DEPLOYMENTS.md
          echo "- Status: Success ‚úÖ" >> DEPLOYMENTS.md
          echo "" >> DEPLOYMENTS.md

      - name: Create release notes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: context.payload.before,
              head: context.sha
            });
            
            const releaseNotes = commits.commits
              .map(c => `- ${c.commit.message} (${c.sha.substring(0, 7)})`)
              .join('\n');
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${new Date().toISOString().split('T')[0]}`,
              name: `Production Release ${new Date().toISOString().split('T')[0]}`,
              body: releaseNotes,
              draft: false,
              prerelease: false
            });

  # Notifications
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [post-deploy-validation]
    if: success()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ‚úÖ Production deployment successful!
            Version: ${{ needs.pre-deploy-checks.outputs.deploy_version }}
            Environment: ${{ github.event.inputs.environment || 'production' }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Update status page
        run: |
          curl -X POST https://api.statuspage.io/v1/pages/$PAGE_ID/incidents \
            -H "Authorization: OAuth ${{ secrets.STATUSPAGE_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "incident": {
                "name": "Deployment completed",
                "status": "resolved",
                "impact": "none",
                "body": "Successfully deployed version ${{ needs.pre-deploy-checks.outputs.deploy_version }}"
              }
            }'