name: Analytics Service CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'services/analytics-service/**'
      - '.github/workflows/analytics-service-ci.yml'
      - 'shared/events/schemas/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'services/analytics-service/**'
      - '.github/workflows/analytics-service-ci.yml'
      - 'shared/events/schemas/**'

env:
  SERVICE_NAME: analytics-service
  SERVICE_PATH: services/analytics-service
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/analytics-service

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.SERVICE_PATH }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ${{ env.SERVICE_PATH }}/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run typecheck

    - name: Run tests
      run: npm run test:coverage
      env:
        NODE_ENV: test

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ${{ env.SERVICE_PATH }}/coverage/lcov.info
        flags: analytics-service
        name: analytics-service-coverage

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.SERVICE_PATH }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ github.sha }}

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        kubectl set image deployment/analytics-service \
          analytics-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-${{ github.sha }} \
          -n medcontract-staging
        
        kubectl rollout status deployment/analytics-service -n medcontract-staging

    - name: Run smoke tests
      run: |
        kubectl run smoke-test-${{ github.sha }} \
          --image=curlimages/curl:latest \
          --rm -i --restart=Never \
          -- curl -f http://analytics-service.medcontract-staging:8300/health

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        # Update image with canary deployment
        kubectl set image deployment/analytics-service-canary \
          analytics-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} \
          -n medcontract-prod
        
        # Wait for canary to be ready
        kubectl rollout status deployment/analytics-service-canary -n medcontract-prod
        
        # Run canary validation
        sleep 300  # 5 minutes of canary traffic
        
        # Check canary metrics
        CANARY_ERROR_RATE=$(kubectl exec -n monitoring deployment/prometheus -- \
          promtool query instant 'rate(analytics_events_processing_errors_total{deployment="analytics-service-canary"}[5m])' | \
          grep -oP '(?<=value: )[0-9.]+')
        
        if (( $(echo "$CANARY_ERROR_RATE < 0.01" | bc -l) )); then
          echo "Canary validation passed, proceeding with full rollout"
          
          # Update main deployment
          kubectl set image deployment/analytics-service \
            analytics-service=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} \
            -n medcontract-prod
          
          kubectl rollout status deployment/analytics-service -n medcontract-prod
        else
          echo "Canary validation failed, error rate: $CANARY_ERROR_RATE"
          exit 1
        fi

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Analytics Service deployed to production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  contract-tests:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Pact consumer tests
      run: |
        cd ${{ env.SERVICE_PATH }}
        npm run test:contract:consumer

    - name: Publish contracts
      run: |
        cd ${{ env.SERVICE_PATH }}
        npm run pact:publish
      env:
        PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_URL }}
        PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}

    - name: Can-i-deploy check
      run: |
        cd ${{ env.SERVICE_PATH }}
        npm run pact:can-i-deploy
      env:
        PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_URL }}
        PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}