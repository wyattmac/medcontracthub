{"version":3,"file":"health-server.js","sourceRoot":"","sources":["../../src/api/health-server.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Express, Request, Response } from 'express';\nimport { Server } from 'http';\nimport { MetricsCollector } from '../monitoring/metrics';\nimport { logger } from '../utils/logger';\nimport { config } from '../config';\n\ninterface HealthStatus {\n  status: 'healthy' | 'unhealthy';\n  timestamp: string;\n  service: string;\n  version: string;\n  uptime: number;\n  checks: {\n    kafka: boolean;\n    clickhouse: boolean;\n    redis: boolean;\n  };\n}\n\nexport class HealthServer {\n  private app: Express;\n  private server?: Server;\n  private metrics: MetricsCollector;\n  private startTime: Date;\n\n  constructor() {\n    this.app = express();\n    this.metrics = MetricsCollector.getInstance();\n    this.startTime = new Date();\n    this.setupRoutes();\n  }\n\n  private setupRoutes(): void {\n    // Health check endpoint\n    this.app.get('/health', async (_req: Request, res: Response) => {\n      try {\n        const health = await this.getHealthStatus();\n        const statusCode = health.status === 'healthy' ? 200 : 503;\n        res.status(statusCode).json(health);\n      } catch (error) {\n        logger.error('Health check failed:', error);\n        res.status(503).json({\n          status: 'unhealthy',\n          error: error instanceof Error ? error.message : 'Health check failed',\n        });\n      }\n    });\n\n    // Readiness check endpoint\n    this.app.get('/ready', async (_req: Request, res: Response) => {\n      try {\n        const isReady = await this.checkReadiness();\n        if (isReady) {\n          res.status(200).json({ ready: true });\n        } else {\n          res.status(503).json({ ready: false });\n        }\n      } catch (error) {\n        res.status(503).json({ \n          ready: false, \n          error: error instanceof Error ? error.message : 'Readiness check failed' \n        });\n      }\n    });\n\n    // Liveness check endpoint\n    this.app.get('/live', (_req: Request, res: Response) => {\n      res.status(200).json({ alive: true });\n    });\n\n    // Metrics endpoint\n    this.app.get('/metrics', async (_req: Request, res: Response) => {\n      try {\n        const metrics = await this.metrics.getMetricsText();\n        res.set('Content-Type', 'text/plain');\n        res.send(metrics);\n      } catch (error) {\n        logger.error('Failed to get metrics:', error);\n        res.status(500).send('Failed to get metrics');\n      }\n    });\n\n    // Service info endpoint\n    this.app.get('/info', (_req: Request, res: Response) => {\n      res.json({\n        service: 'analytics-service',\n        version: process.env['VERSION'] || '1.0.0',\n        environment: config.env,\n        uptime: this.getUptime(),\n        startTime: this.startTime.toISOString(),\n        kafka: {\n          brokers: config.kafka.brokers,\n          topics: config.kafka.topics,\n          consumerGroup: config.kafka.consumerGroup,\n        },\n        clickhouse: {\n          host: config.clickhouse.host,\n          database: config.clickhouse.database,\n        },\n      });\n    });\n\n    // SLO status endpoint\n    this.app.get('/slo', async (_req: Request, res: Response) => {\n      try {\n        const sloStatus = await this.getSLOStatus();\n        res.json(sloStatus);\n      } catch (error) {\n        res.status(500).json({ error: 'Failed to get SLO status' });\n      }\n    });\n  }\n\n  async start(port: number): Promise<void> {\n    return new Promise((resolve) => {\n      this.server = this.app.listen(port, () => {\n        logger.info(`Health server listening on port ${port}`);\n        resolve();\n      });\n    });\n  }\n\n  async stop(): Promise<void> {\n    return new Promise((resolve) => {\n      if (this.server) {\n        this.server.close(() => {\n          logger.info('Health server stopped');\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  private async getHealthStatus(): Promise<HealthStatus> {\n    // In production, check actual service health\n    const checks = {\n      kafka: true, // Check Kafka consumer health\n      clickhouse: true, // Check ClickHouse connection\n      redis: true, // Check Redis connection\n    };\n\n    const isHealthy = Object.values(checks).every(check => check);\n\n    return {\n      status: isHealthy ? 'healthy' : 'unhealthy',\n      timestamp: new Date().toISOString(),\n      service: 'analytics-service',\n      version: process.env['VERSION'] || '1.0.0',\n      uptime: this.getUptime(),\n      checks,\n    };\n  }\n\n  private async checkReadiness(): Promise<boolean> {\n    // Check if service is ready to accept traffic\n    // In production, verify all connections are established\n    return true;\n  }\n\n  private getUptime(): number {\n    return Math.floor((Date.now() - this.startTime.getTime()) / 1000);\n  }\n\n  private async getSLOStatus(): Promise<any> {\n    // Calculate SLO metrics\n    const dataFreshness = 2.5; // minutes - would be calculated from actual data\n    const queryLatencyP99 = 450; // ms - from actual metrics\n    const availability = 0.998; // from uptime metrics\n\n    return {\n      slos: {\n        dataFreshness: {\n          target: config.slos.dataFreshnessMinutes,\n          current: dataFreshness,\n          withinSLO: dataFreshness <= config.slos.dataFreshnessMinutes,\n        },\n        queryLatency: {\n          target: config.slos.queryLatencyP99Ms,\n          current: queryLatencyP99,\n          withinSLO: queryLatencyP99 <= config.slos.queryLatencyP99Ms,\n        },\n        availability: {\n          target: config.slos.availabilityTarget,\n          current: availability,\n          withinSLO: availability >= config.slos.availabilityTarget,\n        },\n      },\n      errorBudget: {\n        remaining: ((1 - config.slos.availabilityTarget) - (1 - availability)) * 100,\n        unit: 'percentage',\n      },\n    };\n  }\n}"]}