{"version":3,"file":"clickhouse-writer.js","sourceRoot":"","sources":["../../src/writers/clickhouse-writer.ts"],"names":[],"mappings":"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","sourcesContent":["import { createClient, ClickHouseClient } from '@clickhouse/client';\nimport { logger } from '../utils/logger';\nimport { config } from '../config';\nimport { MetricsCollector } from '../monitoring/metrics';\n\nexport class ClickHouseWriter {\n  private client: ClickHouseClient;\n  private metrics: MetricsCollector;\n  private batches: Map<string, any[]> = new Map();\n  private flushTimer?: NodeJS.Timeout;\n\n  constructor() {\n    this.client = createClient({\n      host: `http://${config.clickhouse.host}:${config.clickhouse.port}`,\n      database: config.clickhouse.database,\n      username: config.clickhouse.username,\n      password: config.clickhouse.password,\n      request_timeout: config.clickhouse.requestTimeout,\n      compression: {\n        request: true,\n        response: true,\n      },\n      clickhouse_settings: {\n        async_insert: 1,\n        wait_for_async_insert: 0,\n        async_insert_max_data_size: '10MB',\n        async_insert_busy_timeout_ms: 1000,\n      },\n    });\n\n    this.metrics = MetricsCollector.getInstance();\n    this.startFlushTimer();\n  }\n\n  async writeOpportunityViewedEvent(event: any): Promise<void> {\n    const record = {\n      event_id: event.eventId,\n      timestamp: new Date(event.timestamp),\n      opportunity_id: event.opportunityId,\n      user_id: event.userId,\n      session_id: event.sessionId,\n      view_source: event.viewContext.source,\n      search_query: event.viewContext.searchQuery || '',\n      referrer: event.viewContext.referrer || '',\n      opportunity_title: event.opportunityMetadata.title,\n      agency: event.opportunityMetadata.agency,\n      naics_code: event.opportunityMetadata.naicsCode || '',\n      set_aside_type: event.opportunityMetadata.setAsideType || '',\n      response_deadline: event.opportunityMetadata.responseDeadline \n        ? new Date(event.opportunityMetadata.responseDeadline) : null,\n      user_agent: event.userAgent || '',\n      ip_hash: event.ipAddress || '',\n    };\n\n    await this.addToBatch('opportunity_views', record);\n  }\n\n  async writeOpportunitySavedEvent(event: any): Promise<void> {\n    const record = {\n      event_id: event.eventId,\n      timestamp: new Date(event.timestamp),\n      opportunity_id: event.opportunityId,\n      user_id: event.userId,\n      saved_to_list: event.savedToList || '',\n      tags: event.tags,\n      notes: event.notes || '',\n      opportunity_title: event.opportunityMetadata.title,\n      agency: event.opportunityMetadata.agency,\n      naics_code: event.opportunityMetadata.naicsCode || '',\n      set_aside_type: event.opportunityMetadata.setAsideType || '',\n      response_deadline: event.opportunityMetadata.responseDeadline \n        ? new Date(event.opportunityMetadata.responseDeadline) : null,\n      award_amount: event.opportunityMetadata.awardAmount || 0,\n      save_source: event.saveContext.source,\n      ai_score: event.saveContext.aiRecommendationScore || 0,\n    };\n\n    await this.addToBatch('opportunity_saves', record);\n  }\n\n  private async addToBatch(table: string, record: any): Promise<void> {\n    if (!this.batches.has(table)) {\n      this.batches.set(table, []);\n    }\n\n    const batch = this.batches.get(table)!;\n    batch.push(record);\n\n    // Flush if batch is full\n    if (batch.length >= config.processing.batchSize) {\n      await this.flushTable(table);\n    }\n  }\n\n  private async flushTable(table: string): Promise<void> {\n    const batch = this.batches.get(table);\n    if (!batch || batch.length === 0) {\n      return;\n    }\n\n    // Clear the batch immediately to avoid duplicates\n    this.batches.set(table, []);\n\n    const startTime = Date.now();\n    \n    try {\n      await this.client.insert({\n        table,\n        values: batch,\n        format: 'JSONEachRow',\n      });\n\n      const duration = Date.now() - startTime;\n      \n      logger.info(`Flushed ${batch.length} records to ${table}`, {\n        table,\n        count: batch.length,\n        duration,\n      });\n\n      // Track metrics\n      this.metrics.incrementCounter('clickhouse_writes_total', { table, status: 'success' });\n      this.metrics.recordHistogram('clickhouse_write_duration_ms', duration, { table });\n      this.metrics.incrementCounter('records_written_total', { table }, batch.length);\n\n    } catch (error) {\n      logger.error(`Failed to write to ClickHouse table ${table}`, {\n        table,\n        error,\n        batchSize: batch.length,\n      });\n\n      // Track error\n      this.metrics.incrementCounter('clickhouse_writes_total', { table, status: 'error' });\n\n      // In production, implement retry logic or write to fallback storage\n      throw error;\n    }\n  }\n\n  async flush(): Promise<void> {\n    const tables = Array.from(this.batches.keys());\n    \n    await Promise.all(\n      tables.map(table => this.flushTable(table))\n    );\n  }\n\n  private startFlushTimer(): void {\n    this.flushTimer = setInterval(async () => {\n      try {\n        await this.flush();\n      } catch (error) {\n        logger.error('Error in flush timer:', error);\n      }\n    }, config.processing.flushIntervalMs);\n  }\n\n  async close(): Promise<void> {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    \n    await this.flush();\n    await this.client.close();\n  }\n\n  // Query methods for real-time analytics\n  async getRealtimeMetrics(): Promise<any> {\n    const query = `\n      SELECT\n        toStartOfMinute(timestamp) as minute,\n        count() as views,\n        uniq(user_id) as unique_users,\n        uniq(opportunity_id) as unique_opportunities\n      FROM opportunity_views\n      WHERE timestamp >= now() - INTERVAL 1 HOUR\n      GROUP BY minute\n      ORDER BY minute DESC\n      LIMIT 60\n    `;\n\n    const result = await this.client.query({\n      query,\n      format: 'JSONEachRow',\n    });\n\n    return result.json();\n  }\n\n  async getTopOpportunities(hours: number = 24): Promise<any> {\n    const query = `\n      SELECT\n        opportunity_id,\n        opportunity_title,\n        agency,\n        count() as view_count,\n        uniq(user_id) as unique_viewers,\n        countIf(user_id IN (SELECT user_id FROM opportunity_saves WHERE opportunity_id = v.opportunity_id)) as save_count\n      FROM opportunity_views v\n      WHERE timestamp >= now() - INTERVAL ${hours} HOUR\n      GROUP BY opportunity_id, opportunity_title, agency\n      ORDER BY view_count DESC\n      LIMIT 20\n    `;\n\n    const result = await this.client.query({\n      query,\n      format: 'JSONEachRow',\n    });\n\n    return result.json();\n  }\n}"]}