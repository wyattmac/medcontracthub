{"version":3,"file":"metrics.js","sourceRoot":"","sources":["../../src/monitoring/metrics.ts"],"names":[],"mappings":"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","sourcesContent":["import * as promClient from 'prom-client';\n\nexport class MetricsCollector {\n  private static instance: MetricsCollector;\n  private register: promClient.Registry;\n  private counters: Map<string, promClient.Counter> = new Map();\n  private histograms: Map<string, promClient.Histogram> = new Map();\n  private gauges: Map<string, promClient.Gauge> = new Map();\n\n  private constructor() {\n    this.register = new promClient.Registry();\n    \n    // Add default metrics\n    promClient.collectDefaultMetrics({ register: this.register });\n    \n    // Initialize custom metrics\n    this.initializeMetrics();\n  }\n\n  static getInstance(): MetricsCollector {\n    if (!MetricsCollector.instance) {\n      MetricsCollector.instance = new MetricsCollector();\n    }\n    return MetricsCollector.instance;\n  }\n\n  async init(): Promise<void> {\n    // Any async initialization if needed\n  }\n\n  private initializeMetrics(): void {\n    // Event processing metrics\n    this.counters.set('events_consumed_total', new promClient.Counter({\n      name: 'analytics_events_consumed_total',\n      help: 'Total number of events consumed from Kafka',\n      labelNames: ['topic'],\n      registers: [this.register],\n    }));\n\n    this.counters.set('events_processed_total', new promClient.Counter({\n      name: 'analytics_events_processed_total',\n      help: 'Total number of events processed',\n      labelNames: ['topic', 'status'],\n      registers: [this.register],\n    }));\n\n    this.counters.set('events_processing_errors_total', new promClient.Counter({\n      name: 'analytics_events_processing_errors_total',\n      help: 'Total number of event processing errors',\n      labelNames: ['topic'],\n      registers: [this.register],\n    }));\n\n    // ClickHouse metrics\n    this.counters.set('clickhouse_writes_total', new promClient.Counter({\n      name: 'analytics_clickhouse_writes_total',\n      help: 'Total number of ClickHouse write operations',\n      labelNames: ['table', 'status'],\n      registers: [this.register],\n    }));\n\n    this.counters.set('records_written_total', new promClient.Counter({\n      name: 'analytics_records_written_total',\n      help: 'Total number of records written to ClickHouse',\n      labelNames: ['table'],\n      registers: [this.register],\n    }));\n\n    // Business metrics\n    this.counters.set('opportunity_views_total', new promClient.Counter({\n      name: 'analytics_opportunity_views_total',\n      help: 'Total number of opportunity views',\n      labelNames: ['agency', 'source'],\n      registers: [this.register],\n    }));\n\n    this.counters.set('opportunity_saves_total', new promClient.Counter({\n      name: 'analytics_opportunity_saves_total',\n      help: 'Total number of opportunity saves',\n      labelNames: ['agency', 'source'],\n      registers: [this.register],\n    }));\n\n    this.counters.set('anomalies_detected_total', new promClient.Counter({\n      name: 'analytics_anomalies_detected_total',\n      help: 'Total number of anomalies detected',\n      labelNames: ['type'],\n      registers: [this.register],\n    }));\n\n    // Latency histograms\n    this.histograms.set('event_processing_duration_ms', new promClient.Histogram({\n      name: 'analytics_event_processing_duration_milliseconds',\n      help: 'Event processing duration in milliseconds',\n      labelNames: ['topic'],\n      buckets: [10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000],\n      registers: [this.register],\n    }));\n\n    this.histograms.set('clickhouse_write_duration_ms', new promClient.Histogram({\n      name: 'analytics_clickhouse_write_duration_milliseconds',\n      help: 'ClickHouse write duration in milliseconds',\n      labelNames: ['table'],\n      buckets: [50, 100, 250, 500, 1000, 2500, 5000, 10000],\n      registers: [this.register],\n    }));\n\n    // Current state gauges\n    this.gauges.set('kafka_lag', new promClient.Gauge({\n      name: 'analytics_kafka_consumer_lag',\n      help: 'Current Kafka consumer lag',\n      labelNames: ['topic', 'partition'],\n      registers: [this.register],\n    }));\n\n    this.gauges.set('batch_size', new promClient.Gauge({\n      name: 'analytics_current_batch_size',\n      help: 'Current batch size waiting to be written',\n      labelNames: ['table'],\n      registers: [this.register],\n    }));\n\n    this.gauges.set('conversion_funnel', new promClient.Gauge({\n      name: 'analytics_conversion_funnel',\n      help: 'Users at each stage of the conversion funnel',\n      labelNames: ['stage', 'source'],\n      registers: [this.register],\n    }));\n\n    // SLO metrics\n    this.gauges.set('data_freshness_seconds', new promClient.Gauge({\n      name: 'analytics_data_freshness_seconds',\n      help: 'Data freshness in seconds (time since last event)',\n      registers: [this.register],\n    }));\n\n    this.histograms.set('query_latency_ms', new promClient.Histogram({\n      name: 'analytics_query_latency_milliseconds',\n      help: 'Analytics query latency',\n      labelNames: ['query_type'],\n      buckets: [10, 25, 50, 100, 250, 500, 1000, 2500, 5000],\n      registers: [this.register],\n    }));\n  }\n\n  incrementCounter(name: string, labels: Record<string, string> = {}, value: number = 1): void {\n    const counter = this.counters.get(name);\n    if (counter) {\n      counter.inc(labels, value);\n    }\n  }\n\n  recordHistogram(name: string, value: number, labels: Record<string, string> = {}): void {\n    const histogram = this.histograms.get(name);\n    if (histogram) {\n      histogram.observe(labels, value);\n    }\n  }\n\n  recordGauge(name: string, value: number, labels: Record<string, string> = {}): void {\n    const gauge = this.gauges.get(name);\n    if (gauge) {\n      gauge.set(labels, value);\n    }\n  }\n\n  getMetrics(): promClient.Registry {\n    return this.register;\n  }\n\n  async getMetricsText(): Promise<string> {\n    return this.register.metrics();\n  }\n}"]}