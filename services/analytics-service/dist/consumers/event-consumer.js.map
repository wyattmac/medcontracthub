{"version":3,"file":"event-consumer.js","sourceRoot":"","sources":["../../src/consumers/event-consumer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Kafka, Consumer, EachMessagePayload, KafkaMessage, Producer, logLevel } from 'kafkajs';\nimport { SchemaRegistry } from '@kafkajs/confluent-schema-registry';\nimport { ClickHouseWriter } from '../writers/clickhouse-writer';\nimport { EventProcessor } from '../processors/event-processor';\nimport { MetricsCollector } from '../monitoring/metrics';\nimport { logger } from '../utils/logger';\nimport { config } from '../config';\nimport { performance } from 'perf_hooks';\n\nexport class EventConsumer {\n  private kafka: Kafka;\n  private consumer: Consumer;\n  private producer: Producer;\n  private registry: SchemaRegistry;\n  private clickhouseWriter: ClickHouseWriter;\n  private processor: EventProcessor;\n  private metrics: MetricsCollector;\n  private isShuttingDown: boolean = false;\n  private processingCount: number = 0;\n  private lastHeartbeat: number = Date.now();\n\n  constructor() {\n    this.kafka = new Kafka({\n      clientId: config.kafka.clientId,\n      brokers: config.kafka.brokers,\n      logLevel: logLevel.INFO,\n      retry: {\n        initialRetryTime: 100,\n        retries: 8,\n        multiplier: 2,\n        maxRetryTime: 30000,\n      },\n      connectionTimeout: 10000,\n      requestTimeout: 30000,\n    });\n\n    this.consumer = this.kafka.consumer({\n      groupId: config.kafka.consumerGroup,\n      sessionTimeout: config.kafka.sessionTimeout,\n      rebalanceTimeout: config.kafka.rebalanceTimeout,\n      heartbeatInterval: 3000,\n      allowAutoTopicCreation: false,\n      retry: {\n        retries: 5,\n      },\n      maxBytesPerPartition: 1048576, // 1MB\n      maxWaitTimeInMs: 100,\n    });\n\n    this.producer = this.kafka.producer({\n      allowAutoTopicCreation: false,\n      idempotent: true,\n      maxInFlightRequests: 5,\n      retry: {\n        retries: 5,\n      },\n    });\n\n    this.registry = new SchemaRegistry({\n      host: config.schemaRegistry.url,\n    });\n\n    this.clickhouseWriter = new ClickHouseWriter();\n    this.processor = new EventProcessor(this.clickhouseWriter);\n    this.metrics = MetricsCollector.getInstance();\n    \n    // Set up graceful shutdown\n    this.setupShutdownHandlers();\n  }\n\n  async start(): Promise<void> {\n    logger.info('Starting Kafka consumer...');\n\n    try {\n      // Connect to Kafka\n      await this.consumer.connect();\n      await this.producer.connect();\n      \n      // Subscribe to topics\n      await this.consumer.subscribe({\n        topics: config.kafka.topics,\n        fromBeginning: false,\n      });\n\n      // Set up consumer event handlers\n      this.consumer.on('consumer.heartbeat', () => {\n        this.lastHeartbeat = Date.now();\n        logger.debug('Consumer heartbeat');\n      });\n\n      this.consumer.on('consumer.commit_offsets', (event) => {\n        logger.debug('Offsets committed', event);\n      });\n\n      this.consumer.on('consumer.group_join', (event) => {\n        logger.info('Joined consumer group', event);\n        this.metrics.incrementCounter('consumer_rebalances_total');\n      });\n\n      this.consumer.on('consumer.disconnect', () => {\n        logger.warn('Consumer disconnected');\n        this.metrics.incrementCounter('consumer_disconnections_total');\n      });\n\n      // Start consuming with error handling\n      await this.consumer.run({\n        autoCommit: true,\n        autoCommitInterval: 5000,\n        autoCommitThreshold: 100,\n        partitionsConsumedConcurrently: 3,\n        eachMessage: async (payload: EachMessagePayload) => {\n          if (this.isShuttingDown) {\n            logger.info('Skipping message processing due to shutdown');\n            return;\n          }\n          \n          this.processingCount++;\n          try {\n            await this.handleMessage(payload);\n          } finally {\n            this.processingCount--;\n          }\n        },\n      });\n\n      // Start health check monitor\n      this.startHealthMonitor();\n\n      logger.info('Kafka consumer started successfully', {\n        topics: config.kafka.topics,\n        groupId: config.kafka.consumerGroup,\n      });\n    } catch (error) {\n      logger.error('Failed to start Kafka consumer:', error);\n      throw error;\n    }\n  }\n\n  async stop(): Promise<void> {\n    logger.info('Stopping Kafka consumer...');\n    this.isShuttingDown = true;\n\n    try {\n      // Wait for in-flight messages to complete\n      const timeout = 30000; // 30 seconds\n      const startTime = Date.now();\n      \n      while (this.processingCount > 0 && (Date.now() - startTime) < timeout) {\n        logger.info(`Waiting for ${this.processingCount} messages to complete processing...`);\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n\n      if (this.processingCount > 0) {\n        logger.warn(`Shutdown timeout: ${this.processingCount} messages still processing`);\n      }\n\n      // Flush any pending writes\n      await this.processor.flush();\n      \n      // Disconnect from Kafka\n      await this.consumer.disconnect();\n      await this.producer.disconnect();\n      \n      logger.info('Kafka consumer stopped successfully');\n    } catch (error) {\n      logger.error('Error stopping Kafka consumer:', error);\n      throw error;\n    }\n  }\n\n  private async handleMessage(payload: EachMessagePayload): Promise<void> {\n    const { topic, partition, message, heartbeat } = payload;\n    const startTime = performance.now();\n\n    try {\n      // Track message consumption\n      this.metrics.incrementCounter('events_consumed_total', { topic });\n\n      // Check message age\n      const messageAge = Date.now() - parseInt(message.timestamp);\n      if (messageAge > 300000) { // 5 minutes\n        logger.warn('Processing old message', {\n          topic,\n          partition,\n          offset: message.offset,\n          ageMs: messageAge,\n        });\n        this.metrics.incrementCounter('events_old_messages_total', { topic });\n      }\n\n      // Decode message with retry\n      const event = await this.decodeMessageWithRetry(topic, message);\n      \n      if (!event) {\n        logger.warn('Failed to decode message after retries', { topic, partition });\n        this.metrics.incrementCounter('events_decode_failures_total', { topic });\n        return;\n      }\n\n      // Validate event\n      if (!this.validateEvent(event)) {\n        logger.warn('Invalid event structure', { topic, partition, eventId: event.eventId });\n        this.metrics.incrementCounter('events_validation_failures_total', { topic });\n        await this.sendToDLQ(topic, message, new Error('Event validation failed'));\n        return;\n      }\n\n      // Process event with timeout\n      const processingTimeout = 30000; // 30 seconds\n      await Promise.race([\n        this.processor.processEvent(topic, event),\n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('Processing timeout')), processingTimeout)\n        ),\n      ]);\n\n      // Send heartbeat to prevent rebalance during long processing\n      await heartbeat();\n\n      // Track processing time\n      const duration = performance.now() - startTime;\n      this.metrics.recordHistogram('event_processing_duration_ms', duration, { topic });\n\n      // Track lag\n      const lag = Date.now() - parseInt(message.timestamp);\n      this.metrics.recordHistogram('event_lag_ms', lag, { topic });\n\n      // Log successful processing\n      logger.debug('Event processed successfully', {\n        topic,\n        partition,\n        offset: message.offset,\n        eventId: event.eventId,\n        duration,\n        lag,\n      });\n\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      \n      logger.error('Error processing message', {\n        topic,\n        partition,\n        offset: message.offset,\n        error: errorMessage,\n        stack: error instanceof Error ? error.stack : undefined,\n      });\n\n      // Track errors\n      this.metrics.incrementCounter('events_processing_errors_total', { \n        topic, \n        error_type: error instanceof Error ? error.constructor.name : 'unknown',\n      });\n\n      // Handle specific error types\n      if (error instanceof Error && error.message.includes('Processing timeout')) {\n        // Log timeout for monitoring\n        logger.warn('Processing timeout detected', {\n          topic,\n          partition,\n          offset: message.offset,\n        });\n        this.metrics.incrementCounter('events_processing_timeouts_total', { topic });\n      }\n\n      // Send to DLQ\n      await this.sendToDLQ(topic, message, error as Error);\n    }\n  }\n\n  private async decodeMessage(topic: string, message: KafkaMessage): Promise<any> {\n    try {\n      if (!message.value) {\n        return null;\n      }\n\n      // Try to decode with schema registry\n      try {\n        const decoded = await this.registry.decode(message.value);\n        return decoded;\n      } catch (schemaError) {\n        // Fallback to JSON parsing for backwards compatibility\n        const jsonString = message.value.toString();\n        return JSON.parse(jsonString);\n      }\n    } catch (error) {\n      logger.error('Failed to decode message', { topic, error });\n      return null;\n    }\n  }\n\n  private async sendToDLQ(topic: string, message: KafkaMessage, error: Error): Promise<void> {\n    const dlqTopic = `${topic}.dlq`;\n    \n    try {\n      await this.producer.send({\n        topic: dlqTopic,\n        messages: [{\n          key: message.key,\n          value: JSON.stringify({\n            originalTopic: topic,\n            originalOffset: message.offset,\n            originalTimestamp: message.timestamp,\n            errorMessage: error.message,\n            errorStack: error.stack,\n            processingTimestamp: new Date().toISOString(),\n            originalMessage: message.value?.toString(),\n          }),\n          headers: {\n            ...message.headers,\n            'dlq-reason': error.message,\n            'dlq-timestamp': Date.now().toString(),\n            'original-topic': topic,\n          },\n        }],\n      });\n\n      logger.info('Message sent to DLQ', {\n        originalTopic: topic,\n        dlqTopic,\n        offset: message.offset,\n        error: error.message,\n      });\n\n      this.metrics.incrementCounter('events_dlq_sent_total', { topic });\n    } catch (dlqError) {\n      logger.error('Failed to send message to DLQ', {\n        originalTopic: topic,\n        offset: message.offset,\n        error: dlqError,\n      });\n      \n      this.metrics.incrementCounter('events_dlq_failures_total', { topic });\n    }\n  }\n\n  private async decodeMessageWithRetry(topic: string, message: KafkaMessage, retries: number = 3): Promise<any> {\n    for (let attempt = 1; attempt <= retries; attempt++) {\n      try {\n        return await this.decodeMessage(topic, message);\n      } catch (error) {\n        if (attempt === retries) {\n          throw error;\n        }\n        logger.warn(`Decode attempt ${attempt} failed, retrying...`, { topic, error });\n        await new Promise(resolve => setTimeout(resolve, 100 * attempt));\n      }\n    }\n  }\n\n  private validateEvent(event: any): boolean {\n    // Basic validation\n    if (!event || typeof event !== 'object') {\n      return false;\n    }\n\n    // Required fields\n    const requiredFields = ['eventId', 'eventType', 'timestamp'];\n    for (const field of requiredFields) {\n      if (!event[field]) {\n        logger.warn(`Missing required field: ${field}`);\n        return false;\n      }\n    }\n\n    // Timestamp validation\n    const timestamp = new Date(event.timestamp);\n    if (isNaN(timestamp.getTime())) {\n      logger.warn('Invalid timestamp format');\n      return false;\n    }\n\n    // Future timestamp check\n    if (timestamp.getTime() > Date.now() + 60000) { // Allow 1 minute future tolerance\n      logger.warn('Event timestamp is in the future');\n      return false;\n    }\n\n    return true;\n  }\n\n  private setupShutdownHandlers(): void {\n    const signals: NodeJS.Signals[] = ['SIGTERM', 'SIGINT'];\n    \n    signals.forEach(signal => {\n      process.on(signal, async () => {\n        logger.info(`Received ${signal}, initiating graceful shutdown...`);\n        \n        try {\n          await this.stop();\n          process.exit(0);\n        } catch (error) {\n          logger.error('Error during shutdown:', error);\n          process.exit(1);\n        }\n      });\n    });\n  }\n\n  private startHealthMonitor(): void {\n    setInterval(() => {\n      const timeSinceLastHeartbeat = Date.now() - this.lastHeartbeat;\n      \n      if (timeSinceLastHeartbeat > 60000) { // 1 minute\n        logger.error('Consumer heartbeat timeout', {\n          lastHeartbeat: new Date(this.lastHeartbeat).toISOString(),\n          timeSinceLastHeartbeat,\n        });\n        \n        this.metrics.incrementCounter('consumer_heartbeat_timeouts_total');\n      }\n\n      // Record processing count\n      this.metrics.recordGauge('consumer_processing_messages', this.processingCount);\n      \n      // Check consumer lag\n      this.checkConsumerLag();\n    }, 30000); // Every 30 seconds\n  }\n\n  private async checkConsumerLag(): Promise<void> {\n    try {\n      // In production, use admin client to fetch consumer lag\n      // For now, just log current processing status\n      logger.debug('Consumer status', {\n        processingCount: this.processingCount,\n        isShuttingDown: this.isShuttingDown,\n        lastHeartbeat: new Date(this.lastHeartbeat).toISOString(),\n      });\n    } catch (error) {\n      logger.error('Failed to check consumer lag:', error);\n    }\n  }\n}"]}