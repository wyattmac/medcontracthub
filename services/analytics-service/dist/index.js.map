{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,+DAA2D;AAC3D,uDAAmD;AACnD,kDAAwD;AACxD,2CAAwC;AACxC,qCAAkC;AAElC,MAAM,gBAAgB;IACZ,aAAa,CAAgB;IAC7B,YAAY,CAAe;IAC3B,gBAAgB,CAAmB;IAE3C;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,8BAAa,EAAE,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAY,EAAE,CAAC;QACvC,IAAI,CAAC,gBAAgB,GAAG,0BAAgB,CAAC,WAAW,EAAE,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,KAAK;QACT,eAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;QAE7C,IAAI,CAAC;YACH,gCAAgC;YAChC,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;YAEnC,8BAA8B;YAC9B,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,eAAM,CAAC,IAAI,CAAC,CAAC;YAE3C,yBAAyB;YACzB,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;YAEjC,eAAM,CAAC,IAAI,CAAC,wCAAwC,CAAC,CAAC;YAEtD,6BAA6B;YAC7B,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC/B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,eAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC1D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IAEO,qBAAqB;QAC3B,MAAM,QAAQ,GAAG,KAAK,EAAE,MAAc,EAAE,EAAE;YACxC,eAAM,CAAC,IAAI,CAAC,YAAY,MAAM,iCAAiC,CAAC,CAAC;YAEjE,IAAI,CAAC;gBACH,4BAA4B;gBAC5B,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;gBAEhC,sBAAsB;gBACtB,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;gBAE/B,eAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;gBAC3C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,eAAM,CAAC,KAAK,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC;gBAC9C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,CAAC;QACH,CAAC,CAAC;QAEF,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;QACjD,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC/C,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;YACnD,eAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAED,oBAAoB;AACpB,MAAM,OAAO,GAAG,IAAI,gBAAgB,EAAE,CAAC;AACvC,OAAO,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;IAC9B,eAAM,CAAC,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IACpC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC","sourcesContent":["import { EventConsumer } from './consumers/event-consumer';\nimport { HealthServer } from './api/health-server';\nimport { MetricsCollector } from './monitoring/metrics';\nimport { logger } from './utils/logger';\nimport { config } from './config';\n\nclass AnalyticsService {\n  private eventConsumer: EventConsumer;\n  private healthServer: HealthServer;\n  private metricsCollector: MetricsCollector;\n\n  constructor() {\n    this.eventConsumer = new EventConsumer();\n    this.healthServer = new HealthServer();\n    this.metricsCollector = MetricsCollector.getInstance();\n  }\n\n  async start(): Promise<void> {\n    logger.info('Starting Analytics Service...');\n\n    try {\n      // Initialize metrics collection\n      await this.metricsCollector.init();\n      \n      // Start health/metrics server\n      await this.healthServer.start(config.port);\n      \n      // Start consuming events\n      await this.eventConsumer.start();\n      \n      logger.info('Analytics Service started successfully');\n\n      // Graceful shutdown handlers\n      this.setupShutdownHandlers();\n    } catch (error) {\n      logger.error('Failed to start Analytics Service:', error);\n      process.exit(1);\n    }\n  }\n\n  private setupShutdownHandlers(): void {\n    const shutdown = async (signal: string) => {\n      logger.info(`Received ${signal}, starting graceful shutdown...`);\n      \n      try {\n        // Stop accepting new events\n        await this.eventConsumer.stop();\n        \n        // Close health server\n        await this.healthServer.stop();\n        \n        logger.info('Graceful shutdown completed');\n        process.exit(0);\n      } catch (error) {\n        logger.error('Error during shutdown:', error);\n        process.exit(1);\n      }\n    };\n\n    process.on('SIGTERM', () => shutdown('SIGTERM'));\n    process.on('SIGINT', () => shutdown('SIGINT'));\n    process.on('unhandledRejection', (reason, promise) => {\n      logger.error('Unhandled Rejection at:', promise, 'reason:', reason);\n    });\n  }\n}\n\n// Start the service\nconst service = new AnalyticsService();\nservice.start().catch((error) => {\n  logger.error('Fatal error:', error);\n  process.exit(1);\n});"]}