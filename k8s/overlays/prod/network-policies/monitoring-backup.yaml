# Network policies for monitoring and backup services

# Prometheus network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-policy
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # From Grafana
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: grafana
    ports:
    - protocol: TCP
      port: 9090
  # From Alert Manager
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: alertmanager
    ports:
    - protocol: TCP
      port: 9090
  egress:
  # To all services for scraping
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 8080  # Common metrics port
    - protocol: TCP
      port: 8100  # OCR Service
    - protocol: TCP
      port: 8200  # AI Service
    - protocol: TCP
      port: 8300  # Analytics Service
    - protocol: TCP
      port: 8400  # Real-time Service
    - protocol: TCP
      port: 8500  # Worker Service
    - protocol: TCP
      port: 3000  # Main app
    - protocol: TCP
      port: 9090  # Self
    - protocol: TCP
      port: 9100  # Node exporter
    - protocol: TCP
      port: 9187  # PostgreSQL exporter
    - protocol: TCP
      port: 9121  # Redis exporter
    - protocol: TCP
      port: 9308  # Kafka exporter

---
# Grafana network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-policy
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: grafana
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # From ingress
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  egress:
  # To Prometheus
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: prometheus
    ports:
    - protocol: TCP
      port: 9090
  # To Loki
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: loki
    ports:
    - protocol: TCP
      port: 3100
  # To Jaeger
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: jaeger-query
    ports:
    - protocol: TCP
      port: 16686

---
# Jaeger network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: jaeger-policy
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: jaeger
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # From all services (trace collection)
  - from:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 14268  # Jaeger collector HTTP
    - protocol: UDP
      port: 6831   # Jaeger agent compact
    - protocol: UDP
      port: 6832   # Jaeger agent binary
  # Query service from Grafana
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: grafana
    ports:
    - protocol: TCP
      port: 16686
  # From ingress for UI
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 16686
  egress:
  # To Cassandra/Elasticsearch for storage
  - to:
    - podSelector:
        matchLabels:
          app: elasticsearch
    ports:
    - protocol: TCP
      port: 9200

---
# Backup Jobs network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backup-jobs-policy
  namespace: medcontract-prod
spec:
  podSelector:
    matchLabels:
      backup: "true"
  policyTypes:
  - Egress
  egress:
  # To databases
  - to:
    - podSelector:
        matchLabels:
          app: postgres-primary
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: clickhouse
    ports:
    - protocol: TCP
      port: 9000
  - to:
    - podSelector:
        matchLabels:
          app: weaviate
    ports:
    - protocol: TCP
      port: 8080
  # To S3 for backup storage
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 443

---
# Loki network policy (if using for logs)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: loki-policy
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: loki
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # From Promtail/Fluent Bit
  - from:
    - namespaceSelector: {}
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: promtail
    ports:
    - protocol: TCP
      port: 3100
  # From Grafana
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/name: grafana
    ports:
    - protocol: TCP
      port: 3100
  egress:
  # To S3 for log storage
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 443

---
# Cert-manager network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cert-manager-policy
  namespace: cert-manager
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: cert-manager
  policyTypes:
  - Egress
  egress:
  # To ACME servers (Let's Encrypt)
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 443
  # To Kubernetes API
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 6443

---
# External Secrets Operator policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: external-secrets-policy
  namespace: external-secrets
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: external-secrets
  policyTypes:
  - Egress
  egress:
  # To AWS Secrets Manager
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 443
  # To Kubernetes API
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0
    ports:
    - protocol: TCP
      port: 6443